// Copyright 2021 Tencent Inc. All rights reserved.
//
// 支付有礼活动对外API
//
// No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
//
// API version: 0.1.2

// Code generated by WechatPay APIv3 Generator based on [OpenAPI Generator](https://openapi-generator.tech); DO NOT EDIT.

package giftactivity

import (
	"encoding/json"
	"fmt"
)

// ActAdvancedSetting
type ActAdvancedSetting struct {
	// DELIVERY_ALL_PERSON:所有用户；DELIVERY_MEMBER_PERSON：会员用户
	DeliveryUserCategory *DeliveryUserCategory `json:"delivery_user_category,omitempty"`
	// 当投放用户类别为会员用户时必填
	MerchantMemberAppid *string `json:"merchant_member_appid,omitempty"`
	// 主要用于指定可用的支付场景，不限制支付模式不填，限制选填（商家券暂不开放）
	PaymentMode *PaymentMode `json:"payment_mode,omitempty"`
	// 支付方式信息，不填为不限制（商家券暂不开放）
	PaymentMethodInformation *PaymentMethodInfo `json:"payment_method_information,omitempty"`
	// 商户下单时需要传入相同的标记(goods_tag)，用户同时符合其他规则才能享受优惠
	GoodsTags []string `json:"goods_tags,omitempty"`
}

func (o ActAdvancedSetting) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.DeliveryUserCategory != nil {
		toSerialize["delivery_user_category"] = o.DeliveryUserCategory
	}

	if o.MerchantMemberAppid != nil {
		toSerialize["merchant_member_appid"] = o.MerchantMemberAppid
	}

	if o.PaymentMode != nil {
		toSerialize["payment_mode"] = o.PaymentMode
	}

	if o.PaymentMethodInformation != nil {
		toSerialize["payment_method_information"] = o.PaymentMethodInformation
	}

	if o.GoodsTags != nil {
		toSerialize["goods_tags"] = o.GoodsTags
	}
	return json.Marshal(toSerialize)
}

func (o ActAdvancedSetting) String() string {
	var ret string
	if o.DeliveryUserCategory == nil {
		ret += "DeliveryUserCategory:<nil>, "
	} else {
		ret += fmt.Sprintf("DeliveryUserCategory:%v, ", *o.DeliveryUserCategory)
	}

	if o.MerchantMemberAppid == nil {
		ret += "MerchantMemberAppid:<nil>, "
	} else {
		ret += fmt.Sprintf("MerchantMemberAppid:%v, ", *o.MerchantMemberAppid)
	}

	ret += fmt.Sprintf("PaymentMode:%v, ", o.PaymentMode)

	ret += fmt.Sprintf("PaymentMethodInformation:%v, ", o.PaymentMethodInformation)

	ret += fmt.Sprintf("GoodsTags:%v", o.GoodsTags)

	return fmt.Sprintf("ActAdvancedSetting{%s}", ret)
}

func (o ActAdvancedSetting) Clone() *ActAdvancedSetting {
	ret := ActAdvancedSetting{}

	if o.DeliveryUserCategory != nil {
		ret.DeliveryUserCategory = new(DeliveryUserCategory)
		*ret.DeliveryUserCategory = *o.DeliveryUserCategory
	}

	if o.MerchantMemberAppid != nil {
		ret.MerchantMemberAppid = new(string)
		*ret.MerchantMemberAppid = *o.MerchantMemberAppid
	}

	if o.PaymentMode != nil {
		ret.PaymentMode = o.PaymentMode.Clone()
	}

	if o.PaymentMethodInformation != nil {
		ret.PaymentMethodInformation = o.PaymentMethodInformation.Clone()
	}

	if o.GoodsTags != nil {
		ret.GoodsTags = make([]string, len(o.GoodsTags))
		for i, item := range o.GoodsTags {
			ret.GoodsTags[i] = item
		}
	}

	return &ret
}

// ActBaseInfo
type ActBaseInfo struct {
	// 活动名称
	ActivityName *string `json:"activity_name"`
	// 活动副标题
	ActivitySecondTitle *string `json:"activity_second_title"`
	// 商户logo，送出优惠券时展示
	MerchantLogoUrl *string `json:"merchant_logo_url"`
	// 代金券的背景颜色，可设置10种颜色，颜色取值可参考[开发指引](../../../products/gift-activity/development.html) 3.2.1  background_color取值，默认为微信支付绿色， 颜色取值为颜色图中的颜色名称。
	BackgroundColor *string `json:"background_color,omitempty"`
	// 活动开始时间，最长可以配置1年内的活动，活动有效期最长90天
	BeginTime *string `json:"begin_time"`
	// 活动结束时间，最长可以配置1年内的活动，活动有效期最长90天
	EndTime *string `json:"end_time"`
	// 可自定义活动有效时间内可用的多个时间段以及天内时间点
	AvailablePeriods *AvailablePeriod `json:"available_periods,omitempty"`
	// 商户创建批次凭据号（格式：商户id+日期+流水号），商户侧需保持唯一性，可包含英文字母，数字，｜，_，*，-等内容，不允许出现其他不合法符号
	OutRequestNo *string `json:"out_request_no"`
	// OFF_LINE_PAY：拉用户回店消费；JUMP_MINI_APP：引导用户前往小程序消费
	DeliveryPurpose *DeliveryPurposeCategory `json:"delivery_purpose"`
	// 投放目的为跳转小程序时必填
	MiniProgramsAppid *string `json:"mini_programs_appid,omitempty"`
	// 投放目的为跳转小程序必填
	MiniProgramsPath *string `json:"mini_programs_path,omitempty"`
}

func (o ActBaseInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.ActivityName == nil {
		return nil, fmt.Errorf("field `ActivityName` is required and must be specified in ActBaseInfo")
	}
	toSerialize["activity_name"] = o.ActivityName

	if o.ActivitySecondTitle == nil {
		return nil, fmt.Errorf("field `ActivitySecondTitle` is required and must be specified in ActBaseInfo")
	}
	toSerialize["activity_second_title"] = o.ActivitySecondTitle

	if o.MerchantLogoUrl == nil {
		return nil, fmt.Errorf("field `MerchantLogoUrl` is required and must be specified in ActBaseInfo")
	}
	toSerialize["merchant_logo_url"] = o.MerchantLogoUrl

	if o.BackgroundColor != nil {
		toSerialize["background_color"] = o.BackgroundColor
	}

	if o.BeginTime == nil {
		return nil, fmt.Errorf("field `BeginTime` is required and must be specified in ActBaseInfo")
	}
	toSerialize["begin_time"] = o.BeginTime

	if o.EndTime == nil {
		return nil, fmt.Errorf("field `EndTime` is required and must be specified in ActBaseInfo")
	}
	toSerialize["end_time"] = o.EndTime

	if o.AvailablePeriods != nil {
		toSerialize["available_periods"] = o.AvailablePeriods
	}

	if o.OutRequestNo == nil {
		return nil, fmt.Errorf("field `OutRequestNo` is required and must be specified in ActBaseInfo")
	}
	toSerialize["out_request_no"] = o.OutRequestNo

	if o.DeliveryPurpose == nil {
		return nil, fmt.Errorf("field `DeliveryPurpose` is required and must be specified in ActBaseInfo")
	}
	toSerialize["delivery_purpose"] = o.DeliveryPurpose

	if o.MiniProgramsAppid != nil {
		toSerialize["mini_programs_appid"] = o.MiniProgramsAppid
	}

	if o.MiniProgramsPath != nil {
		toSerialize["mini_programs_path"] = o.MiniProgramsPath
	}
	return json.Marshal(toSerialize)
}

func (o ActBaseInfo) String() string {
	var ret string
	if o.ActivityName == nil {
		ret += "ActivityName:<nil>, "
	} else {
		ret += fmt.Sprintf("ActivityName:%v, ", *o.ActivityName)
	}

	if o.ActivitySecondTitle == nil {
		ret += "ActivitySecondTitle:<nil>, "
	} else {
		ret += fmt.Sprintf("ActivitySecondTitle:%v, ", *o.ActivitySecondTitle)
	}

	if o.MerchantLogoUrl == nil {
		ret += "MerchantLogoUrl:<nil>, "
	} else {
		ret += fmt.Sprintf("MerchantLogoUrl:%v, ", *o.MerchantLogoUrl)
	}

	if o.BackgroundColor == nil {
		ret += "BackgroundColor:<nil>, "
	} else {
		ret += fmt.Sprintf("BackgroundColor:%v, ", *o.BackgroundColor)
	}

	if o.BeginTime == nil {
		ret += "BeginTime:<nil>, "
	} else {
		ret += fmt.Sprintf("BeginTime:%v, ", *o.BeginTime)
	}

	if o.EndTime == nil {
		ret += "EndTime:<nil>, "
	} else {
		ret += fmt.Sprintf("EndTime:%v, ", *o.EndTime)
	}

	ret += fmt.Sprintf("AvailablePeriods:%v, ", o.AvailablePeriods)

	if o.OutRequestNo == nil {
		ret += "OutRequestNo:<nil>, "
	} else {
		ret += fmt.Sprintf("OutRequestNo:%v, ", *o.OutRequestNo)
	}

	if o.DeliveryPurpose == nil {
		ret += "DeliveryPurpose:<nil>, "
	} else {
		ret += fmt.Sprintf("DeliveryPurpose:%v, ", *o.DeliveryPurpose)
	}

	if o.MiniProgramsAppid == nil {
		ret += "MiniProgramsAppid:<nil>, "
	} else {
		ret += fmt.Sprintf("MiniProgramsAppid:%v, ", *o.MiniProgramsAppid)
	}

	if o.MiniProgramsPath == nil {
		ret += "MiniProgramsPath:<nil>"
	} else {
		ret += fmt.Sprintf("MiniProgramsPath:%v", *o.MiniProgramsPath)
	}

	return fmt.Sprintf("ActBaseInfo{%s}", ret)
}

func (o ActBaseInfo) Clone() *ActBaseInfo {
	ret := ActBaseInfo{}

	if o.ActivityName != nil {
		ret.ActivityName = new(string)
		*ret.ActivityName = *o.ActivityName
	}

	if o.ActivitySecondTitle != nil {
		ret.ActivitySecondTitle = new(string)
		*ret.ActivitySecondTitle = *o.ActivitySecondTitle
	}

	if o.MerchantLogoUrl != nil {
		ret.MerchantLogoUrl = new(string)
		*ret.MerchantLogoUrl = *o.MerchantLogoUrl
	}

	if o.BackgroundColor != nil {
		ret.BackgroundColor = new(string)
		*ret.BackgroundColor = *o.BackgroundColor
	}

	if o.BeginTime != nil {
		ret.BeginTime = new(string)
		*ret.BeginTime = *o.BeginTime
	}

	if o.EndTime != nil {
		ret.EndTime = new(string)
		*ret.EndTime = *o.EndTime
	}

	if o.AvailablePeriods != nil {
		ret.AvailablePeriods = o.AvailablePeriods.Clone()
	}

	if o.OutRequestNo != nil {
		ret.OutRequestNo = new(string)
		*ret.OutRequestNo = *o.OutRequestNo
	}

	if o.DeliveryPurpose != nil {
		ret.DeliveryPurpose = new(DeliveryPurposeCategory)
		*ret.DeliveryPurpose = *o.DeliveryPurpose
	}

	if o.MiniProgramsAppid != nil {
		ret.MiniProgramsAppid = new(string)
		*ret.MiniProgramsAppid = *o.MiniProgramsAppid
	}

	if o.MiniProgramsPath != nil {
		ret.MiniProgramsPath = new(string)
		*ret.MiniProgramsPath = *o.MiniProgramsPath
	}

	return &ret
}

// ActParticipateMchInfo
type ActParticipateMchInfo struct {
	// 商户Id
	Mchid *string `json:"mchid"`
	// 商户名称
	MerchantName *string `json:"merchant_name,omitempty"`
	// 创建时间
	CreateTime *string `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime *string `json:"update_time,omitempty"`
}

func (o ActParticipateMchInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.Mchid == nil {
		return nil, fmt.Errorf("field `Mchid` is required and must be specified in ActParticipateMchInfo")
	}
	toSerialize["mchid"] = o.Mchid

	if o.MerchantName != nil {
		toSerialize["merchant_name"] = o.MerchantName
	}

	if o.CreateTime != nil {
		toSerialize["create_time"] = o.CreateTime
	}

	if o.UpdateTime != nil {
		toSerialize["update_time"] = o.UpdateTime
	}
	return json.Marshal(toSerialize)
}

func (o ActParticipateMchInfo) String() string {
	var ret string
	if o.Mchid == nil {
		ret += "Mchid:<nil>, "
	} else {
		ret += fmt.Sprintf("Mchid:%v, ", *o.Mchid)
	}

	if o.MerchantName == nil {
		ret += "MerchantName:<nil>, "
	} else {
		ret += fmt.Sprintf("MerchantName:%v, ", *o.MerchantName)
	}

	if o.CreateTime == nil {
		ret += "CreateTime:<nil>, "
	} else {
		ret += fmt.Sprintf("CreateTime:%v, ", *o.CreateTime)
	}

	if o.UpdateTime == nil {
		ret += "UpdateTime:<nil>"
	} else {
		ret += fmt.Sprintf("UpdateTime:%v", *o.UpdateTime)
	}

	return fmt.Sprintf("ActParticipateMchInfo{%s}", ret)
}

func (o ActParticipateMchInfo) Clone() *ActParticipateMchInfo {
	ret := ActParticipateMchInfo{}

	if o.Mchid != nil {
		ret.Mchid = new(string)
		*ret.Mchid = *o.Mchid
	}

	if o.MerchantName != nil {
		ret.MerchantName = new(string)
		*ret.MerchantName = *o.MerchantName
	}

	if o.CreateTime != nil {
		ret.CreateTime = new(string)
		*ret.CreateTime = *o.CreateTime
	}

	if o.UpdateTime != nil {
		ret.UpdateTime = new(string)
		*ret.UpdateTime = *o.UpdateTime
	}

	return &ret
}

// ActStatus
type ActStatus string

func (e ActStatus) Ptr() *ActStatus {
	return &e
}

// Enums of ActStatus
const (
	ACTSTATUS_ACT_STATUS_UNKNOWN   ActStatus = "ACT_STATUS_UNKNOWN"
	ACTSTATUS_CREATE_ACT_STATUS    ActStatus = "CREATE_ACT_STATUS"
	ACTSTATUS_ONGOING_ACT_STATUS   ActStatus = "ONGOING_ACT_STATUS"
	ACTSTATUS_TERMINATE_ACT_STATUS ActStatus = "TERMINATE_ACT_STATUS"
	ACTSTATUS_STOP_ACT_STATUS      ActStatus = "STOP_ACT_STATUS"
	ACTSTATUS_OVER_TIME_ACT_STATUS ActStatus = "OVER_TIME_ACT_STATUS"
	ACTSTATUS_CREATE_ACT_FAILED    ActStatus = "CREATE_ACT_FAILED"
)

// ActType 活动类型
type ActType string

func (e ActType) Ptr() *ActType {
	return &e
}

// Enums of ActType
const (
	ACTTYPE_FULL_SEND_ACT_TYPE     ActType = "FULL_SEND_ACT_TYPE"
	ACTTYPE_STEP_SEND_ACT_TYPE     ActType = "STEP_SEND_ACT_TYPE"
	ACTTYPE_SPECIFIC_SEND_ACT_TYPE ActType = "SPECIFIC_SEND_ACT_TYPE"
)

// ActivityInformation
type ActivityInformation struct {
	// 活动Id
	ActivityId *string `json:"activity_id,omitempty"`
	// 活动类型
	ActivityType *ActType `json:"activity_type,omitempty"`
	// 创建活动时录入的基本信息
	ActivityBaseInfo *ActBaseInfo `json:"activity_base_info,omitempty"`
	// 奖品派送规则，分别对应满送、阶梯送、满A送B中的一种
	AwardSendRule *AwardSendRule `json:"award_send_rule,omitempty"`
	// 创建时传入的高级设置信息
	AdvancedSetting *ActAdvancedSetting `json:"advanced_setting,omitempty"`
	// 活动当前状态枚举值
	ActivityStatus *ActStatus `json:"activity_status,omitempty"`
	// 创建商户号
	CreatorMerchantId *string `json:"creator_merchant_id,omitempty"`
	// 所属商户号
	BelongMerchantId *string `json:"belong_merchant_id,omitempty"`
	// 活动创建时间
	CreateTime *string `json:"create_time,omitempty"`
	// 活动更新时间
	UpdateTime *string `json:"update_time,omitempty"`
}

func (o ActivityInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.ActivityId != nil {
		toSerialize["activity_id"] = o.ActivityId
	}

	if o.ActivityType != nil {
		toSerialize["activity_type"] = o.ActivityType
	}

	if o.ActivityBaseInfo != nil {
		toSerialize["activity_base_info"] = o.ActivityBaseInfo
	}

	if o.AwardSendRule != nil {
		toSerialize["award_send_rule"] = o.AwardSendRule
	}

	if o.AdvancedSetting != nil {
		toSerialize["advanced_setting"] = o.AdvancedSetting
	}

	if o.ActivityStatus != nil {
		toSerialize["activity_status"] = o.ActivityStatus
	}

	if o.CreatorMerchantId != nil {
		toSerialize["creator_merchant_id"] = o.CreatorMerchantId
	}

	if o.BelongMerchantId != nil {
		toSerialize["belong_merchant_id"] = o.BelongMerchantId
	}

	if o.CreateTime != nil {
		toSerialize["create_time"] = o.CreateTime
	}

	if o.UpdateTime != nil {
		toSerialize["update_time"] = o.UpdateTime
	}
	return json.Marshal(toSerialize)
}

func (o ActivityInformation) String() string {
	var ret string
	if o.ActivityId == nil {
		ret += "ActivityId:<nil>, "
	} else {
		ret += fmt.Sprintf("ActivityId:%v, ", *o.ActivityId)
	}

	if o.ActivityType == nil {
		ret += "ActivityType:<nil>, "
	} else {
		ret += fmt.Sprintf("ActivityType:%v, ", *o.ActivityType)
	}

	ret += fmt.Sprintf("ActivityBaseInfo:%v, ", o.ActivityBaseInfo)

	ret += fmt.Sprintf("AwardSendRule:%v, ", o.AwardSendRule)

	ret += fmt.Sprintf("AdvancedSetting:%v, ", o.AdvancedSetting)

	if o.ActivityStatus == nil {
		ret += "ActivityStatus:<nil>, "
	} else {
		ret += fmt.Sprintf("ActivityStatus:%v, ", *o.ActivityStatus)
	}

	if o.CreatorMerchantId == nil {
		ret += "CreatorMerchantId:<nil>, "
	} else {
		ret += fmt.Sprintf("CreatorMerchantId:%v, ", *o.CreatorMerchantId)
	}

	if o.BelongMerchantId == nil {
		ret += "BelongMerchantId:<nil>, "
	} else {
		ret += fmt.Sprintf("BelongMerchantId:%v, ", *o.BelongMerchantId)
	}

	if o.CreateTime == nil {
		ret += "CreateTime:<nil>, "
	} else {
		ret += fmt.Sprintf("CreateTime:%v, ", *o.CreateTime)
	}

	if o.UpdateTime == nil {
		ret += "UpdateTime:<nil>"
	} else {
		ret += fmt.Sprintf("UpdateTime:%v", *o.UpdateTime)
	}

	return fmt.Sprintf("ActivityInformation{%s}", ret)
}

func (o ActivityInformation) Clone() *ActivityInformation {
	ret := ActivityInformation{}

	if o.ActivityId != nil {
		ret.ActivityId = new(string)
		*ret.ActivityId = *o.ActivityId
	}

	if o.ActivityType != nil {
		ret.ActivityType = new(ActType)
		*ret.ActivityType = *o.ActivityType
	}

	if o.ActivityBaseInfo != nil {
		ret.ActivityBaseInfo = o.ActivityBaseInfo.Clone()
	}

	if o.AwardSendRule != nil {
		ret.AwardSendRule = o.AwardSendRule.Clone()
	}

	if o.AdvancedSetting != nil {
		ret.AdvancedSetting = o.AdvancedSetting.Clone()
	}

	if o.ActivityStatus != nil {
		ret.ActivityStatus = new(ActStatus)
		*ret.ActivityStatus = *o.ActivityStatus
	}

	if o.CreatorMerchantId != nil {
		ret.CreatorMerchantId = new(string)
		*ret.CreatorMerchantId = *o.CreatorMerchantId
	}

	if o.BelongMerchantId != nil {
		ret.BelongMerchantId = new(string)
		*ret.BelongMerchantId = *o.BelongMerchantId
	}

	if o.CreateTime != nil {
		ret.CreateTime = new(string)
		*ret.CreateTime = *o.CreateTime
	}

	if o.UpdateTime != nil {
		ret.UpdateTime = new(string)
		*ret.UpdateTime = *o.UpdateTime
	}

	return &ret
}

// AddActivityMerchantBody
type AddActivityMerchantBody struct {
	// 新增到活动中的发券商户号列表
	MerchantIdList []string `json:"merchant_id_list"`
	// 商户添加发券商户号的凭据号，商户侧需保持唯一性
	AddRequestNo *string `json:"add_request_no"`
}

func (o AddActivityMerchantBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.MerchantIdList == nil {
		return nil, fmt.Errorf("field `MerchantIdList` is required and must be specified in AddActivityMerchantBody")
	}
	toSerialize["merchant_id_list"] = o.MerchantIdList

	if o.AddRequestNo == nil {
		return nil, fmt.Errorf("field `AddRequestNo` is required and must be specified in AddActivityMerchantBody")
	}
	toSerialize["add_request_no"] = o.AddRequestNo
	return json.Marshal(toSerialize)
}

func (o AddActivityMerchantBody) String() string {
	var ret string
	ret += fmt.Sprintf("MerchantIdList:%v, ", o.MerchantIdList)

	if o.AddRequestNo == nil {
		ret += "AddRequestNo:<nil>"
	} else {
		ret += fmt.Sprintf("AddRequestNo:%v", *o.AddRequestNo)
	}

	return fmt.Sprintf("AddActivityMerchantBody{%s}", ret)
}

func (o AddActivityMerchantBody) Clone() *AddActivityMerchantBody {
	ret := AddActivityMerchantBody{}

	if o.MerchantIdList != nil {
		ret.MerchantIdList = make([]string, len(o.MerchantIdList))
		for i, item := range o.MerchantIdList {
			ret.MerchantIdList[i] = item
		}
	}

	if o.AddRequestNo != nil {
		ret.AddRequestNo = new(string)
		*ret.AddRequestNo = *o.AddRequestNo
	}

	return &ret
}

// AddActivityMerchantRequest
type AddActivityMerchantRequest struct {
	// 活动Id
	ActivityId *string `json:"activity_id"`
	// 新增到活动中的发券商户号列表
	MerchantIdList []string `json:"merchant_id_list"`
	// 商户添加发券商户号的凭据号，商户侧需保持唯一性
	AddRequestNo *string `json:"add_request_no"`
}

func (o AddActivityMerchantRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.ActivityId == nil {
		return nil, fmt.Errorf("field `ActivityId` is required and must be specified in AddActivityMerchantRequest")
	}
	toSerialize["activity_id"] = o.ActivityId

	if o.MerchantIdList == nil {
		return nil, fmt.Errorf("field `MerchantIdList` is required and must be specified in AddActivityMerchantRequest")
	}
	toSerialize["merchant_id_list"] = o.MerchantIdList

	if o.AddRequestNo == nil {
		return nil, fmt.Errorf("field `AddRequestNo` is required and must be specified in AddActivityMerchantRequest")
	}
	toSerialize["add_request_no"] = o.AddRequestNo
	return json.Marshal(toSerialize)
}

func (o AddActivityMerchantRequest) String() string {
	var ret string
	if o.ActivityId == nil {
		ret += "ActivityId:<nil>, "
	} else {
		ret += fmt.Sprintf("ActivityId:%v, ", *o.ActivityId)
	}

	ret += fmt.Sprintf("MerchantIdList:%v, ", o.MerchantIdList)

	if o.AddRequestNo == nil {
		ret += "AddRequestNo:<nil>"
	} else {
		ret += fmt.Sprintf("AddRequestNo:%v", *o.AddRequestNo)
	}

	return fmt.Sprintf("AddActivityMerchantRequest{%s}", ret)
}

func (o AddActivityMerchantRequest) Clone() *AddActivityMerchantRequest {
	ret := AddActivityMerchantRequest{}

	if o.ActivityId != nil {
		ret.ActivityId = new(string)
		*ret.ActivityId = *o.ActivityId
	}

	if o.MerchantIdList != nil {
		ret.MerchantIdList = make([]string, len(o.MerchantIdList))
		for i, item := range o.MerchantIdList {
			ret.MerchantIdList[i] = item
		}
	}

	if o.AddRequestNo != nil {
		ret.AddRequestNo = new(string)
		*ret.AddRequestNo = *o.AddRequestNo
	}

	return &ret
}

// AddActivityMerchantResponse
type AddActivityMerchantResponse struct {
	// 活动Id
	ActivityId *string `json:"activity_id,omitempty"`
	// 未通过规则校验的发券商户号列表
	InvalidMerchantIdList []InvalidParticipateMerchant `json:"invalid_merchant_id_list,omitempty"`
	// 成功添加发券商户号的时间
	AddTime *string `json:"add_time,omitempty"`
}

func (o AddActivityMerchantResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.ActivityId != nil {
		toSerialize["activity_id"] = o.ActivityId
	}

	if o.InvalidMerchantIdList != nil {
		toSerialize["invalid_merchant_id_list"] = o.InvalidMerchantIdList
	}

	if o.AddTime != nil {
		toSerialize["add_time"] = o.AddTime
	}
	return json.Marshal(toSerialize)
}

func (o AddActivityMerchantResponse) String() string {
	var ret string
	if o.ActivityId == nil {
		ret += "ActivityId:<nil>, "
	} else {
		ret += fmt.Sprintf("ActivityId:%v, ", *o.ActivityId)
	}

	ret += fmt.Sprintf("InvalidMerchantIdList:%v, ", o.InvalidMerchantIdList)

	if o.AddTime == nil {
		ret += "AddTime:<nil>"
	} else {
		ret += fmt.Sprintf("AddTime:%v", *o.AddTime)
	}

	return fmt.Sprintf("AddActivityMerchantResponse{%s}", ret)
}

func (o AddActivityMerchantResponse) Clone() *AddActivityMerchantResponse {
	ret := AddActivityMerchantResponse{}

	if o.ActivityId != nil {
		ret.ActivityId = new(string)
		*ret.ActivityId = *o.ActivityId
	}

	if o.InvalidMerchantIdList != nil {
		ret.InvalidMerchantIdList = make([]InvalidParticipateMerchant, len(o.InvalidMerchantIdList))
		for i, item := range o.InvalidMerchantIdList {
			ret.InvalidMerchantIdList[i] = *item.Clone()
		}
	}

	if o.AddTime != nil {
		ret.AddTime = new(string)
		*ret.AddTime = *o.AddTime
	}

	return &ret
}

// AvailableDayTime
type AvailableDayTime struct {
	// 每日可用开始时间(格式:110000,表示11:00:00)
	BeginDayTime *string `json:"begin_day_time"`
	// 每日可用结束时间 (格式:135959,表示13:59:59)
	EndDayTime *string `json:"end_day_time"`
}

func (o AvailableDayTime) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.BeginDayTime == nil {
		return nil, fmt.Errorf("field `BeginDayTime` is required and must be specified in AvailableDayTime")
	}
	toSerialize["begin_day_time"] = o.BeginDayTime

	if o.EndDayTime == nil {
		return nil, fmt.Errorf("field `EndDayTime` is required and must be specified in AvailableDayTime")
	}
	toSerialize["end_day_time"] = o.EndDayTime
	return json.Marshal(toSerialize)
}

func (o AvailableDayTime) String() string {
	var ret string
	if o.BeginDayTime == nil {
		ret += "BeginDayTime:<nil>, "
	} else {
		ret += fmt.Sprintf("BeginDayTime:%v, ", *o.BeginDayTime)
	}

	if o.EndDayTime == nil {
		ret += "EndDayTime:<nil>"
	} else {
		ret += fmt.Sprintf("EndDayTime:%v", *o.EndDayTime)
	}

	return fmt.Sprintf("AvailableDayTime{%s}", ret)
}

func (o AvailableDayTime) Clone() *AvailableDayTime {
	ret := AvailableDayTime{}

	if o.BeginDayTime != nil {
		ret.BeginDayTime = new(string)
		*ret.BeginDayTime = *o.BeginDayTime
	}

	if o.EndDayTime != nil {
		ret.EndDayTime = new(string)
		*ret.EndDayTime = *o.EndDayTime
	}

	return &ret
}

// AvailablePeriod
type AvailablePeriod struct {
	// 可用时间
	AvailableTime []AvailableTime `json:"available_time,omitempty"`
	// 每日可用时间
	AvailableDayTime []AvailableDayTime `json:"available_day_time,omitempty"`
}

func (o AvailablePeriod) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.AvailableTime != nil {
		toSerialize["available_time"] = o.AvailableTime
	}

	if o.AvailableDayTime != nil {
		toSerialize["available_day_time"] = o.AvailableDayTime
	}
	return json.Marshal(toSerialize)
}

func (o AvailablePeriod) String() string {
	var ret string
	ret += fmt.Sprintf("AvailableTime:%v, ", o.AvailableTime)

	ret += fmt.Sprintf("AvailableDayTime:%v", o.AvailableDayTime)

	return fmt.Sprintf("AvailablePeriod{%s}", ret)
}

func (o AvailablePeriod) Clone() *AvailablePeriod {
	ret := AvailablePeriod{}

	if o.AvailableTime != nil {
		ret.AvailableTime = make([]AvailableTime, len(o.AvailableTime))
		for i, item := range o.AvailableTime {
			ret.AvailableTime[i] = *item.Clone()
		}
	}

	if o.AvailableDayTime != nil {
		ret.AvailableDayTime = make([]AvailableDayTime, len(o.AvailableDayTime))
		for i, item := range o.AvailableDayTime {
			ret.AvailableDayTime[i] = *item.Clone()
		}
	}

	return &ret
}

// AvailableTime
type AvailableTime struct {
	// 可用开始时间
	BeginTime *string `json:"begin_time"`
	// 可用结束时间
	EndTime *string `json:"end_time"`
}

func (o AvailableTime) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.BeginTime == nil {
		return nil, fmt.Errorf("field `BeginTime` is required and must be specified in AvailableTime")
	}
	toSerialize["begin_time"] = o.BeginTime

	if o.EndTime == nil {
		return nil, fmt.Errorf("field `EndTime` is required and must be specified in AvailableTime")
	}
	toSerialize["end_time"] = o.EndTime
	return json.Marshal(toSerialize)
}

func (o AvailableTime) String() string {
	var ret string
	if o.BeginTime == nil {
		ret += "BeginTime:<nil>, "
	} else {
		ret += fmt.Sprintf("BeginTime:%v, ", *o.BeginTime)
	}

	if o.EndTime == nil {
		ret += "EndTime:<nil>"
	} else {
		ret += fmt.Sprintf("EndTime:%v", *o.EndTime)
	}

	return fmt.Sprintf("AvailableTime{%s}", ret)
}

func (o AvailableTime) Clone() *AvailableTime {
	ret := AvailableTime{}

	if o.BeginTime != nil {
		ret.BeginTime = new(string)
		*ret.BeginTime = *o.BeginTime
	}

	if o.EndTime != nil {
		ret.EndTime = new(string)
		*ret.EndTime = *o.EndTime
	}

	return &ret
}

// AwardBaseInfo
type AwardBaseInfo struct {
	// 代金券批次Id
	StockId *string `json:"stock_id"`
	// 奖品大图，必填
	OriginalImageUrl *string `json:"original_image_url"`
	// 奖品小图，当选多张券时必填
	ThumbnailUrl *string `json:"thumbnail_url,omitempty"`
}

func (o AwardBaseInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.StockId == nil {
		return nil, fmt.Errorf("field `StockId` is required and must be specified in AwardBaseInfo")
	}
	toSerialize["stock_id"] = o.StockId

	if o.OriginalImageUrl == nil {
		return nil, fmt.Errorf("field `OriginalImageUrl` is required and must be specified in AwardBaseInfo")
	}
	toSerialize["original_image_url"] = o.OriginalImageUrl

	if o.ThumbnailUrl != nil {
		toSerialize["thumbnail_url"] = o.ThumbnailUrl
	}
	return json.Marshal(toSerialize)
}

func (o AwardBaseInfo) String() string {
	var ret string
	if o.StockId == nil {
		ret += "StockId:<nil>, "
	} else {
		ret += fmt.Sprintf("StockId:%v, ", *o.StockId)
	}

	if o.OriginalImageUrl == nil {
		ret += "OriginalImageUrl:<nil>, "
	} else {
		ret += fmt.Sprintf("OriginalImageUrl:%v, ", *o.OriginalImageUrl)
	}

	if o.ThumbnailUrl == nil {
		ret += "ThumbnailUrl:<nil>"
	} else {
		ret += fmt.Sprintf("ThumbnailUrl:%v", *o.ThumbnailUrl)
	}

	return fmt.Sprintf("AwardBaseInfo{%s}", ret)
}

func (o AwardBaseInfo) Clone() *AwardBaseInfo {
	ret := AwardBaseInfo{}

	if o.StockId != nil {
		ret.StockId = new(string)
		*ret.StockId = *o.StockId
	}

	if o.OriginalImageUrl != nil {
		ret.OriginalImageUrl = new(string)
		*ret.OriginalImageUrl = *o.OriginalImageUrl
	}

	if o.ThumbnailUrl != nil {
		ret.ThumbnailUrl = new(string)
		*ret.ThumbnailUrl = *o.ThumbnailUrl
	}

	return &ret
}

// AwardSendRule
type AwardSendRule struct {
	//
	FullSendRule *FullSendRule `json:"full_send_rule,omitempty"`
}

func (o AwardSendRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.FullSendRule != nil {
		toSerialize["full_send_rule"] = o.FullSendRule
	}
	return json.Marshal(toSerialize)
}

func (o AwardSendRule) String() string {
	var ret string
	ret += fmt.Sprintf("FullSendRule:%v", o.FullSendRule)

	return fmt.Sprintf("AwardSendRule{%s}", ret)
}

func (o AwardSendRule) Clone() *AwardSendRule {
	ret := AwardSendRule{}

	if o.FullSendRule != nil {
		ret.FullSendRule = o.FullSendRule.Clone()
	}

	return &ret
}

// AwardType
type AwardType string

func (e AwardType) Ptr() *AwardType {
	return &e
}

// Enums of AwardType
const (
	AWARDTYPE_BUSIFAVOR AwardType = "BUSIFAVOR"
)

// BankCardCategory
type BankCardCategory string

func (e BankCardCategory) Ptr() *BankCardCategory {
	return &e
}

// Enums of BankCardCategory
const (
	BANKCARDCATEGORY_DEBIT_CARD  BankCardCategory = "DEBIT_CARD"
	BANKCARDCATEGORY_CREDIT_CARD BankCardCategory = "CREDIT_CARD"
)

// CreateFullSendActRequest
type CreateFullSendActRequest struct {
	// 用于创建活动的基本信息
	ActivityBaseInfo *ActBaseInfo `json:"activity_base_info"`
	// 满送活动规则
	AwardSendRule *FullSendRule `json:"award_send_rule"`
	// 其他高级配置项
	AdvancedSetting *ActAdvancedSetting `json:"advanced_setting,omitempty"`
}

func (o CreateFullSendActRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.ActivityBaseInfo == nil {
		return nil, fmt.Errorf("field `ActivityBaseInfo` is required and must be specified in CreateFullSendActRequest")
	}
	toSerialize["activity_base_info"] = o.ActivityBaseInfo

	if o.AwardSendRule == nil {
		return nil, fmt.Errorf("field `AwardSendRule` is required and must be specified in CreateFullSendActRequest")
	}
	toSerialize["award_send_rule"] = o.AwardSendRule

	if o.AdvancedSetting != nil {
		toSerialize["advanced_setting"] = o.AdvancedSetting
	}
	return json.Marshal(toSerialize)
}

func (o CreateFullSendActRequest) String() string {
	var ret string
	ret += fmt.Sprintf("ActivityBaseInfo:%v, ", o.ActivityBaseInfo)

	ret += fmt.Sprintf("AwardSendRule:%v, ", o.AwardSendRule)

	ret += fmt.Sprintf("AdvancedSetting:%v", o.AdvancedSetting)

	return fmt.Sprintf("CreateFullSendActRequest{%s}", ret)
}

func (o CreateFullSendActRequest) Clone() *CreateFullSendActRequest {
	ret := CreateFullSendActRequest{}

	if o.ActivityBaseInfo != nil {
		ret.ActivityBaseInfo = o.ActivityBaseInfo.Clone()
	}

	if o.AwardSendRule != nil {
		ret.AwardSendRule = o.AwardSendRule.Clone()
	}

	if o.AdvancedSetting != nil {
		ret.AdvancedSetting = o.AdvancedSetting.Clone()
	}

	return &ret
}

// CreateFullSendActResponse
type CreateFullSendActResponse struct {
	// 活动id
	ActivityId *string `json:"activity_id"`
	// 创建时间
	CreateTime *string `json:"create_time"`
}

func (o CreateFullSendActResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.ActivityId == nil {
		return nil, fmt.Errorf("field `ActivityId` is required and must be specified in CreateFullSendActResponse")
	}
	toSerialize["activity_id"] = o.ActivityId

	if o.CreateTime == nil {
		return nil, fmt.Errorf("field `CreateTime` is required and must be specified in CreateFullSendActResponse")
	}
	toSerialize["create_time"] = o.CreateTime
	return json.Marshal(toSerialize)
}

func (o CreateFullSendActResponse) String() string {
	var ret string
	if o.ActivityId == nil {
		ret += "ActivityId:<nil>, "
	} else {
		ret += fmt.Sprintf("ActivityId:%v, ", *o.ActivityId)
	}

	if o.CreateTime == nil {
		ret += "CreateTime:<nil>"
	} else {
		ret += fmt.Sprintf("CreateTime:%v", *o.CreateTime)
	}

	return fmt.Sprintf("CreateFullSendActResponse{%s}", ret)
}

func (o CreateFullSendActResponse) Clone() *CreateFullSendActResponse {
	ret := CreateFullSendActResponse{}

	if o.ActivityId != nil {
		ret.ActivityId = new(string)
		*ret.ActivityId = *o.ActivityId
	}

	if o.CreateTime != nil {
		ret.CreateTime = new(string)
		*ret.CreateTime = *o.CreateTime
	}

	return &ret
}

// DeleteActivityMerchantBody
type DeleteActivityMerchantBody struct {
	// 从活动已有的发券商户号中移除的商户号列表
	MerchantIdList []string `json:"merchant_id_list"`
	// 商户添加发券商户号的凭据号，商户侧需保持唯一性
	DeleteRequestNo *string `json:"delete_request_no"`
}

func (o DeleteActivityMerchantBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.MerchantIdList == nil {
		return nil, fmt.Errorf("field `MerchantIdList` is required and must be specified in DeleteActivityMerchantBody")
	}
	toSerialize["merchant_id_list"] = o.MerchantIdList

	if o.DeleteRequestNo == nil {
		return nil, fmt.Errorf("field `DeleteRequestNo` is required and must be specified in DeleteActivityMerchantBody")
	}
	toSerialize["delete_request_no"] = o.DeleteRequestNo
	return json.Marshal(toSerialize)
}

func (o DeleteActivityMerchantBody) String() string {
	var ret string
	ret += fmt.Sprintf("MerchantIdList:%v, ", o.MerchantIdList)

	if o.DeleteRequestNo == nil {
		ret += "DeleteRequestNo:<nil>"
	} else {
		ret += fmt.Sprintf("DeleteRequestNo:%v", *o.DeleteRequestNo)
	}

	return fmt.Sprintf("DeleteActivityMerchantBody{%s}", ret)
}

func (o DeleteActivityMerchantBody) Clone() *DeleteActivityMerchantBody {
	ret := DeleteActivityMerchantBody{}

	if o.MerchantIdList != nil {
		ret.MerchantIdList = make([]string, len(o.MerchantIdList))
		for i, item := range o.MerchantIdList {
			ret.MerchantIdList[i] = item
		}
	}

	if o.DeleteRequestNo != nil {
		ret.DeleteRequestNo = new(string)
		*ret.DeleteRequestNo = *o.DeleteRequestNo
	}

	return &ret
}

// DeleteActivityMerchantRequest
type DeleteActivityMerchantRequest struct {
	// 活动Id
	ActivityId *string `json:"activity_id"`
	// 从活动已有的发券商户号中移除的商户号列表
	MerchantIdList []string `json:"merchant_id_list"`
	// 商户添加发券商户号的凭据号，商户侧需保持唯一性
	DeleteRequestNo *string `json:"delete_request_no"`
}

func (o DeleteActivityMerchantRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.ActivityId == nil {
		return nil, fmt.Errorf("field `ActivityId` is required and must be specified in DeleteActivityMerchantRequest")
	}
	toSerialize["activity_id"] = o.ActivityId

	if o.MerchantIdList == nil {
		return nil, fmt.Errorf("field `MerchantIdList` is required and must be specified in DeleteActivityMerchantRequest")
	}
	toSerialize["merchant_id_list"] = o.MerchantIdList

	if o.DeleteRequestNo == nil {
		return nil, fmt.Errorf("field `DeleteRequestNo` is required and must be specified in DeleteActivityMerchantRequest")
	}
	toSerialize["delete_request_no"] = o.DeleteRequestNo
	return json.Marshal(toSerialize)
}

func (o DeleteActivityMerchantRequest) String() string {
	var ret string
	if o.ActivityId == nil {
		ret += "ActivityId:<nil>, "
	} else {
		ret += fmt.Sprintf("ActivityId:%v, ", *o.ActivityId)
	}

	ret += fmt.Sprintf("MerchantIdList:%v, ", o.MerchantIdList)

	if o.DeleteRequestNo == nil {
		ret += "DeleteRequestNo:<nil>"
	} else {
		ret += fmt.Sprintf("DeleteRequestNo:%v", *o.DeleteRequestNo)
	}

	return fmt.Sprintf("DeleteActivityMerchantRequest{%s}", ret)
}

func (o DeleteActivityMerchantRequest) Clone() *DeleteActivityMerchantRequest {
	ret := DeleteActivityMerchantRequest{}

	if o.ActivityId != nil {
		ret.ActivityId = new(string)
		*ret.ActivityId = *o.ActivityId
	}

	if o.MerchantIdList != nil {
		ret.MerchantIdList = make([]string, len(o.MerchantIdList))
		for i, item := range o.MerchantIdList {
			ret.MerchantIdList[i] = item
		}
	}

	if o.DeleteRequestNo != nil {
		ret.DeleteRequestNo = new(string)
		*ret.DeleteRequestNo = *o.DeleteRequestNo
	}

	return &ret
}

// DeleteActivityMerchantResponse
type DeleteActivityMerchantResponse struct {
	// 活动Id
	ActivityId *string `json:"activity_id"`
	// 成功删除发券商户号的时间
	DeleteTime *string `json:"delete_time,omitempty"`
}

func (o DeleteActivityMerchantResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.ActivityId == nil {
		return nil, fmt.Errorf("field `ActivityId` is required and must be specified in DeleteActivityMerchantResponse")
	}
	toSerialize["activity_id"] = o.ActivityId

	if o.DeleteTime != nil {
		toSerialize["delete_time"] = o.DeleteTime
	}
	return json.Marshal(toSerialize)
}

func (o DeleteActivityMerchantResponse) String() string {
	var ret string
	if o.ActivityId == nil {
		ret += "ActivityId:<nil>, "
	} else {
		ret += fmt.Sprintf("ActivityId:%v, ", *o.ActivityId)
	}

	if o.DeleteTime == nil {
		ret += "DeleteTime:<nil>"
	} else {
		ret += fmt.Sprintf("DeleteTime:%v", *o.DeleteTime)
	}

	return fmt.Sprintf("DeleteActivityMerchantResponse{%s}", ret)
}

func (o DeleteActivityMerchantResponse) Clone() *DeleteActivityMerchantResponse {
	ret := DeleteActivityMerchantResponse{}

	if o.ActivityId != nil {
		ret.ActivityId = new(string)
		*ret.ActivityId = *o.ActivityId
	}

	if o.DeleteTime != nil {
		ret.DeleteTime = new(string)
		*ret.DeleteTime = *o.DeleteTime
	}

	return &ret
}

// DeliveryPurposeCategory 投放目的枚举值
type DeliveryPurposeCategory string

func (e DeliveryPurposeCategory) Ptr() *DeliveryPurposeCategory {
	return &e
}

// Enums of DeliveryPurposeCategory
const (
	DELIVERYPURPOSECATEGORY_OFF_LINE_PAY  DeliveryPurposeCategory = "OFF_LINE_PAY"
	DELIVERYPURPOSECATEGORY_JUMP_MINI_APP DeliveryPurposeCategory = "JUMP_MINI_APP"
)

// DeliveryUserCategory
type DeliveryUserCategory string

func (e DeliveryUserCategory) Ptr() *DeliveryUserCategory {
	return &e
}

// Enums of DeliveryUserCategory
const (
	DELIVERYUSERCATEGORY_DELIVERY_ALL_PERSON    DeliveryUserCategory = "DELIVERY_ALL_PERSON"
	DELIVERYUSERCATEGORY_DELIVERY_MEMBER_PERSON DeliveryUserCategory = "DELIVERY_MEMBER_PERSON"
)

// FullSendRule
type FullSendRule struct {
	// 消费金额门槛 单位分
	TransactionAmountMinimum *int64 `json:"transaction_amount_minimum"`
	// 发放内容，可选单张券或礼包，选礼包时奖品限定3-5个
	SendContent *SendContentCategory `json:"send_content"`
	// 奖品类型，暂时只支持商家券
	AwardType *AwardType `json:"award_type"`
	// 奖品基本信息列表
	AwardList []AwardBaseInfo `json:"award_list"`
	// 发券商户号选取规则，支持选择在用券商户或手动输入商户号两种，选择手动时，发券商户号必填（商家券只支持手动输入）
	MerchantOption *SendMerchantOption `json:"merchant_option"`
	// 发券商户号，列表
	MerchantIdList []string `json:"merchant_id_list,omitempty"`
}

func (o FullSendRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.TransactionAmountMinimum == nil {
		return nil, fmt.Errorf("field `TransactionAmountMinimum` is required and must be specified in FullSendRule")
	}
	toSerialize["transaction_amount_minimum"] = o.TransactionAmountMinimum

	if o.SendContent == nil {
		return nil, fmt.Errorf("field `SendContent` is required and must be specified in FullSendRule")
	}
	toSerialize["send_content"] = o.SendContent

	if o.AwardType == nil {
		return nil, fmt.Errorf("field `AwardType` is required and must be specified in FullSendRule")
	}
	toSerialize["award_type"] = o.AwardType

	if o.AwardList == nil {
		return nil, fmt.Errorf("field `AwardList` is required and must be specified in FullSendRule")
	}
	toSerialize["award_list"] = o.AwardList

	if o.MerchantOption == nil {
		return nil, fmt.Errorf("field `MerchantOption` is required and must be specified in FullSendRule")
	}
	toSerialize["merchant_option"] = o.MerchantOption

	if o.MerchantIdList != nil {
		toSerialize["merchant_id_list"] = o.MerchantIdList
	}
	return json.Marshal(toSerialize)
}

func (o FullSendRule) String() string {
	var ret string
	if o.TransactionAmountMinimum == nil {
		ret += "TransactionAmountMinimum:<nil>, "
	} else {
		ret += fmt.Sprintf("TransactionAmountMinimum:%v, ", *o.TransactionAmountMinimum)
	}

	if o.SendContent == nil {
		ret += "SendContent:<nil>, "
	} else {
		ret += fmt.Sprintf("SendContent:%v, ", *o.SendContent)
	}

	if o.AwardType == nil {
		ret += "AwardType:<nil>, "
	} else {
		ret += fmt.Sprintf("AwardType:%v, ", *o.AwardType)
	}

	ret += fmt.Sprintf("AwardList:%v, ", o.AwardList)

	if o.MerchantOption == nil {
		ret += "MerchantOption:<nil>, "
	} else {
		ret += fmt.Sprintf("MerchantOption:%v, ", *o.MerchantOption)
	}

	ret += fmt.Sprintf("MerchantIdList:%v", o.MerchantIdList)

	return fmt.Sprintf("FullSendRule{%s}", ret)
}

func (o FullSendRule) Clone() *FullSendRule {
	ret := FullSendRule{}

	if o.TransactionAmountMinimum != nil {
		ret.TransactionAmountMinimum = new(int64)
		*ret.TransactionAmountMinimum = *o.TransactionAmountMinimum
	}

	if o.SendContent != nil {
		ret.SendContent = new(SendContentCategory)
		*ret.SendContent = *o.SendContent
	}

	if o.AwardType != nil {
		ret.AwardType = new(AwardType)
		*ret.AwardType = *o.AwardType
	}

	if o.AwardList != nil {
		ret.AwardList = make([]AwardBaseInfo, len(o.AwardList))
		for i, item := range o.AwardList {
			ret.AwardList[i] = *item.Clone()
		}
	}

	if o.MerchantOption != nil {
		ret.MerchantOption = new(SendMerchantOption)
		*ret.MerchantOption = *o.MerchantOption
	}

	if o.MerchantIdList != nil {
		ret.MerchantIdList = make([]string, len(o.MerchantIdList))
		for i, item := range o.MerchantIdList {
			ret.MerchantIdList[i] = item
		}
	}

	return &ret
}

// GetActDetailRequest
type GetActDetailRequest struct {
	// 活动Id
	ActivityId *string `json:"activity_id"`
}

func (o GetActDetailRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.ActivityId == nil {
		return nil, fmt.Errorf("field `ActivityId` is required and must be specified in GetActDetailRequest")
	}
	toSerialize["activity_id"] = o.ActivityId
	return json.Marshal(toSerialize)
}

func (o GetActDetailRequest) String() string {
	var ret string
	if o.ActivityId == nil {
		ret += "ActivityId:<nil>"
	} else {
		ret += fmt.Sprintf("ActivityId:%v", *o.ActivityId)
	}

	return fmt.Sprintf("GetActDetailRequest{%s}", ret)
}

func (o GetActDetailRequest) Clone() *GetActDetailRequest {
	ret := GetActDetailRequest{}

	if o.ActivityId != nil {
		ret.ActivityId = new(string)
		*ret.ActivityId = *o.ActivityId
	}

	return &ret
}

// GetActDetailResponse
type GetActDetailResponse struct {
	// 活动Id
	ActivityId *string `json:"activity_id"`
	// 活动类型
	ActivityType *ActType `json:"activity_type,omitempty"`
	// 创建活动时录入的基本信息
	ActivityBaseInfo *ActBaseInfo `json:"activity_base_info"`
	// 奖品派送规则，分别对应满送、阶梯送、满A送B中的一种
	AwardSendRule *AwardSendRule `json:"award_send_rule"`
	// 创建时传入的高级设置信息
	AdvancedSetting *ActAdvancedSetting `json:"advanced_setting,omitempty"`
	// 活动当前状态枚举值
	ActivityStatus *ActStatus `json:"activity_status"`
	// 创建商户号
	CreatorMerchantId *string `json:"creator_merchant_id"`
	// 所属商户号
	BelongMerchantId *string `json:"belong_merchant_id"`
	// 活动暂停时间
	PauseTime *string `json:"pause_time,omitempty"`
	// 活动恢复时间
	RecoveryTime *string `json:"recovery_time,omitempty"`
	// 活动创建时间
	CreateTime *string `json:"create_time,omitempty"`
	// 活动更新时间
	UpdateTime *string `json:"update_time,omitempty"`
}

func (o GetActDetailResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.ActivityId == nil {
		return nil, fmt.Errorf("field `ActivityId` is required and must be specified in GetActDetailResponse")
	}
	toSerialize["activity_id"] = o.ActivityId

	if o.ActivityType != nil {
		toSerialize["activity_type"] = o.ActivityType
	}

	if o.ActivityBaseInfo == nil {
		return nil, fmt.Errorf("field `ActivityBaseInfo` is required and must be specified in GetActDetailResponse")
	}
	toSerialize["activity_base_info"] = o.ActivityBaseInfo

	if o.AwardSendRule == nil {
		return nil, fmt.Errorf("field `AwardSendRule` is required and must be specified in GetActDetailResponse")
	}
	toSerialize["award_send_rule"] = o.AwardSendRule

	if o.AdvancedSetting != nil {
		toSerialize["advanced_setting"] = o.AdvancedSetting
	}

	if o.ActivityStatus == nil {
		return nil, fmt.Errorf("field `ActivityStatus` is required and must be specified in GetActDetailResponse")
	}
	toSerialize["activity_status"] = o.ActivityStatus

	if o.CreatorMerchantId == nil {
		return nil, fmt.Errorf("field `CreatorMerchantId` is required and must be specified in GetActDetailResponse")
	}
	toSerialize["creator_merchant_id"] = o.CreatorMerchantId

	if o.BelongMerchantId == nil {
		return nil, fmt.Errorf("field `BelongMerchantId` is required and must be specified in GetActDetailResponse")
	}
	toSerialize["belong_merchant_id"] = o.BelongMerchantId

	if o.PauseTime != nil {
		toSerialize["pause_time"] = o.PauseTime
	}

	if o.RecoveryTime != nil {
		toSerialize["recovery_time"] = o.RecoveryTime
	}

	if o.CreateTime != nil {
		toSerialize["create_time"] = o.CreateTime
	}

	if o.UpdateTime != nil {
		toSerialize["update_time"] = o.UpdateTime
	}
	return json.Marshal(toSerialize)
}

func (o GetActDetailResponse) String() string {
	var ret string
	if o.ActivityId == nil {
		ret += "ActivityId:<nil>, "
	} else {
		ret += fmt.Sprintf("ActivityId:%v, ", *o.ActivityId)
	}

	if o.ActivityType == nil {
		ret += "ActivityType:<nil>, "
	} else {
		ret += fmt.Sprintf("ActivityType:%v, ", *o.ActivityType)
	}

	ret += fmt.Sprintf("ActivityBaseInfo:%v, ", o.ActivityBaseInfo)

	ret += fmt.Sprintf("AwardSendRule:%v, ", o.AwardSendRule)

	ret += fmt.Sprintf("AdvancedSetting:%v, ", o.AdvancedSetting)

	if o.ActivityStatus == nil {
		ret += "ActivityStatus:<nil>, "
	} else {
		ret += fmt.Sprintf("ActivityStatus:%v, ", *o.ActivityStatus)
	}

	if o.CreatorMerchantId == nil {
		ret += "CreatorMerchantId:<nil>, "
	} else {
		ret += fmt.Sprintf("CreatorMerchantId:%v, ", *o.CreatorMerchantId)
	}

	if o.BelongMerchantId == nil {
		ret += "BelongMerchantId:<nil>, "
	} else {
		ret += fmt.Sprintf("BelongMerchantId:%v, ", *o.BelongMerchantId)
	}

	if o.PauseTime == nil {
		ret += "PauseTime:<nil>, "
	} else {
		ret += fmt.Sprintf("PauseTime:%v, ", *o.PauseTime)
	}

	if o.RecoveryTime == nil {
		ret += "RecoveryTime:<nil>, "
	} else {
		ret += fmt.Sprintf("RecoveryTime:%v, ", *o.RecoveryTime)
	}

	if o.CreateTime == nil {
		ret += "CreateTime:<nil>, "
	} else {
		ret += fmt.Sprintf("CreateTime:%v, ", *o.CreateTime)
	}

	if o.UpdateTime == nil {
		ret += "UpdateTime:<nil>"
	} else {
		ret += fmt.Sprintf("UpdateTime:%v", *o.UpdateTime)
	}

	return fmt.Sprintf("GetActDetailResponse{%s}", ret)
}

func (o GetActDetailResponse) Clone() *GetActDetailResponse {
	ret := GetActDetailResponse{}

	if o.ActivityId != nil {
		ret.ActivityId = new(string)
		*ret.ActivityId = *o.ActivityId
	}

	if o.ActivityType != nil {
		ret.ActivityType = new(ActType)
		*ret.ActivityType = *o.ActivityType
	}

	if o.ActivityBaseInfo != nil {
		ret.ActivityBaseInfo = o.ActivityBaseInfo.Clone()
	}

	if o.AwardSendRule != nil {
		ret.AwardSendRule = o.AwardSendRule.Clone()
	}

	if o.AdvancedSetting != nil {
		ret.AdvancedSetting = o.AdvancedSetting.Clone()
	}

	if o.ActivityStatus != nil {
		ret.ActivityStatus = new(ActStatus)
		*ret.ActivityStatus = *o.ActivityStatus
	}

	if o.CreatorMerchantId != nil {
		ret.CreatorMerchantId = new(string)
		*ret.CreatorMerchantId = *o.CreatorMerchantId
	}

	if o.BelongMerchantId != nil {
		ret.BelongMerchantId = new(string)
		*ret.BelongMerchantId = *o.BelongMerchantId
	}

	if o.PauseTime != nil {
		ret.PauseTime = new(string)
		*ret.PauseTime = *o.PauseTime
	}

	if o.RecoveryTime != nil {
		ret.RecoveryTime = new(string)
		*ret.RecoveryTime = *o.RecoveryTime
	}

	if o.CreateTime != nil {
		ret.CreateTime = new(string)
		*ret.CreateTime = *o.CreateTime
	}

	if o.UpdateTime != nil {
		ret.UpdateTime = new(string)
		*ret.UpdateTime = *o.UpdateTime
	}

	return &ret
}

// InvalidParticipateMerchant
type InvalidParticipateMerchant struct {
	// 商户Id
	Mchid *string `json:"mchid,omitempty"`
	// 活动参与商户校验失败的原因
	InvalidReason *string `json:"invalid_reason,omitempty"`
}

func (o InvalidParticipateMerchant) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.Mchid != nil {
		toSerialize["mchid"] = o.Mchid
	}

	if o.InvalidReason != nil {
		toSerialize["invalid_reason"] = o.InvalidReason
	}
	return json.Marshal(toSerialize)
}

func (o InvalidParticipateMerchant) String() string {
	var ret string
	if o.Mchid == nil {
		ret += "Mchid:<nil>, "
	} else {
		ret += fmt.Sprintf("Mchid:%v, ", *o.Mchid)
	}

	if o.InvalidReason == nil {
		ret += "InvalidReason:<nil>"
	} else {
		ret += fmt.Sprintf("InvalidReason:%v", *o.InvalidReason)
	}

	return fmt.Sprintf("InvalidParticipateMerchant{%s}", ret)
}

func (o InvalidParticipateMerchant) Clone() *InvalidParticipateMerchant {
	ret := InvalidParticipateMerchant{}

	if o.Mchid != nil {
		ret.Mchid = new(string)
		*ret.Mchid = *o.Mchid
	}

	if o.InvalidReason != nil {
		ret.InvalidReason = new(string)
		*ret.InvalidReason = *o.InvalidReason
	}

	return &ret
}

// ListActMchResponse
type ListActMchResponse struct {
	// 商户信息列表
	Data []ActParticipateMchInfo `json:"data,omitempty"`
	// 商户数量
	TotalCount *int64 `json:"total_count"`
	// 分页页码
	Offset *int64 `json:"offset"`
	// 分页大小
	Limit *int64 `json:"limit"`
	// 活动Id
	ActivityId *string `json:"activity_id"`
}

func (o ListActMchResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.Data != nil {
		toSerialize["data"] = o.Data
	}

	if o.TotalCount == nil {
		return nil, fmt.Errorf("field `TotalCount` is required and must be specified in ListActMchResponse")
	}
	toSerialize["total_count"] = o.TotalCount

	if o.Offset == nil {
		return nil, fmt.Errorf("field `Offset` is required and must be specified in ListActMchResponse")
	}
	toSerialize["offset"] = o.Offset

	if o.Limit == nil {
		return nil, fmt.Errorf("field `Limit` is required and must be specified in ListActMchResponse")
	}
	toSerialize["limit"] = o.Limit

	if o.ActivityId == nil {
		return nil, fmt.Errorf("field `ActivityId` is required and must be specified in ListActMchResponse")
	}
	toSerialize["activity_id"] = o.ActivityId
	return json.Marshal(toSerialize)
}

func (o ListActMchResponse) String() string {
	var ret string
	ret += fmt.Sprintf("Data:%v, ", o.Data)

	if o.TotalCount == nil {
		ret += "TotalCount:<nil>, "
	} else {
		ret += fmt.Sprintf("TotalCount:%v, ", *o.TotalCount)
	}

	if o.Offset == nil {
		ret += "Offset:<nil>, "
	} else {
		ret += fmt.Sprintf("Offset:%v, ", *o.Offset)
	}

	if o.Limit == nil {
		ret += "Limit:<nil>, "
	} else {
		ret += fmt.Sprintf("Limit:%v, ", *o.Limit)
	}

	if o.ActivityId == nil {
		ret += "ActivityId:<nil>"
	} else {
		ret += fmt.Sprintf("ActivityId:%v", *o.ActivityId)
	}

	return fmt.Sprintf("ListActMchResponse{%s}", ret)
}

func (o ListActMchResponse) Clone() *ListActMchResponse {
	ret := ListActMchResponse{}

	if o.Data != nil {
		ret.Data = make([]ActParticipateMchInfo, len(o.Data))
		for i, item := range o.Data {
			ret.Data[i] = *item.Clone()
		}
	}

	if o.TotalCount != nil {
		ret.TotalCount = new(int64)
		*ret.TotalCount = *o.TotalCount
	}

	if o.Offset != nil {
		ret.Offset = new(int64)
		*ret.Offset = *o.Offset
	}

	if o.Limit != nil {
		ret.Limit = new(int64)
		*ret.Limit = *o.Limit
	}

	if o.ActivityId != nil {
		ret.ActivityId = new(string)
		*ret.ActivityId = *o.ActivityId
	}

	return &ret
}

// ListActSkuResponse
type ListActSkuResponse struct {
	// 商品信息列表(sku信息列表)
	Data       []SkuInfo `json:"data,omitempty"`
	TotalCount *int64    `json:"total_count"`
	// 分页页码
	Offset *int64 `json:"offset"`
	// 分页大小
	Limit *int64 `json:"limit"`
	// 活动ID
	ActivityId *string `json:"activity_id"`
}

func (o ListActSkuResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.Data != nil {
		toSerialize["data"] = o.Data
	}

	if o.TotalCount == nil {
		return nil, fmt.Errorf("field `TotalCount` is required and must be specified in ListActSkuResponse")
	}
	toSerialize["total_count"] = o.TotalCount

	if o.Offset == nil {
		return nil, fmt.Errorf("field `Offset` is required and must be specified in ListActSkuResponse")
	}
	toSerialize["offset"] = o.Offset

	if o.Limit == nil {
		return nil, fmt.Errorf("field `Limit` is required and must be specified in ListActSkuResponse")
	}
	toSerialize["limit"] = o.Limit

	if o.ActivityId == nil {
		return nil, fmt.Errorf("field `ActivityId` is required and must be specified in ListActSkuResponse")
	}
	toSerialize["activity_id"] = o.ActivityId
	return json.Marshal(toSerialize)
}

func (o ListActSkuResponse) String() string {
	var ret string
	ret += fmt.Sprintf("Data:%v, ", o.Data)

	if o.TotalCount == nil {
		ret += "TotalCount:<nil>, "
	} else {
		ret += fmt.Sprintf("TotalCount:%v, ", *o.TotalCount)
	}

	if o.Offset == nil {
		ret += "Offset:<nil>, "
	} else {
		ret += fmt.Sprintf("Offset:%v, ", *o.Offset)
	}

	if o.Limit == nil {
		ret += "Limit:<nil>, "
	} else {
		ret += fmt.Sprintf("Limit:%v, ", *o.Limit)
	}

	if o.ActivityId == nil {
		ret += "ActivityId:<nil>"
	} else {
		ret += fmt.Sprintf("ActivityId:%v", *o.ActivityId)
	}

	return fmt.Sprintf("ListActSkuResponse{%s}", ret)
}

func (o ListActSkuResponse) Clone() *ListActSkuResponse {
	ret := ListActSkuResponse{}

	if o.Data != nil {
		ret.Data = make([]SkuInfo, len(o.Data))
		for i, item := range o.Data {
			ret.Data[i] = *item.Clone()
		}
	}

	if o.TotalCount != nil {
		ret.TotalCount = new(int64)
		*ret.TotalCount = *o.TotalCount
	}

	if o.Offset != nil {
		ret.Offset = new(int64)
		*ret.Offset = *o.Offset
	}

	if o.Limit != nil {
		ret.Limit = new(int64)
		*ret.Limit = *o.Limit
	}

	if o.ActivityId != nil {
		ret.ActivityId = new(string)
		*ret.ActivityId = *o.ActivityId
	}

	return &ret
}

// ListActivitiesRequest
type ListActivitiesRequest struct {
	// 分页页码
	Offset *int64 `json:"offset"`
	// 分页大小
	Limit *int64 `json:"limit"`
	// 活动名称，支持模糊搜索
	ActivityName *string `json:"activity_name,omitempty"`
	// 活动状态
	ActivityStatus *ActStatus `json:"activity_status,omitempty"`
	// 奖品类型，暂时只支持商家券
	AwardType *AwardType `json:"award_type,omitempty"`
}

func (o ListActivitiesRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.Offset == nil {
		return nil, fmt.Errorf("field `Offset` is required and must be specified in ListActivitiesRequest")
	}
	toSerialize["offset"] = o.Offset

	if o.Limit == nil {
		return nil, fmt.Errorf("field `Limit` is required and must be specified in ListActivitiesRequest")
	}
	toSerialize["limit"] = o.Limit

	if o.ActivityName != nil {
		toSerialize["activity_name"] = o.ActivityName
	}

	if o.ActivityStatus != nil {
		toSerialize["activity_status"] = o.ActivityStatus
	}

	if o.AwardType != nil {
		toSerialize["award_type"] = o.AwardType
	}
	return json.Marshal(toSerialize)
}

func (o ListActivitiesRequest) String() string {
	var ret string
	if o.Offset == nil {
		ret += "Offset:<nil>, "
	} else {
		ret += fmt.Sprintf("Offset:%v, ", *o.Offset)
	}

	if o.Limit == nil {
		ret += "Limit:<nil>, "
	} else {
		ret += fmt.Sprintf("Limit:%v, ", *o.Limit)
	}

	if o.ActivityName == nil {
		ret += "ActivityName:<nil>, "
	} else {
		ret += fmt.Sprintf("ActivityName:%v, ", *o.ActivityName)
	}

	if o.ActivityStatus == nil {
		ret += "ActivityStatus:<nil>, "
	} else {
		ret += fmt.Sprintf("ActivityStatus:%v, ", *o.ActivityStatus)
	}

	if o.AwardType == nil {
		ret += "AwardType:<nil>"
	} else {
		ret += fmt.Sprintf("AwardType:%v", *o.AwardType)
	}

	return fmt.Sprintf("ListActivitiesRequest{%s}", ret)
}

func (o ListActivitiesRequest) Clone() *ListActivitiesRequest {
	ret := ListActivitiesRequest{}

	if o.Offset != nil {
		ret.Offset = new(int64)
		*ret.Offset = *o.Offset
	}

	if o.Limit != nil {
		ret.Limit = new(int64)
		*ret.Limit = *o.Limit
	}

	if o.ActivityName != nil {
		ret.ActivityName = new(string)
		*ret.ActivityName = *o.ActivityName
	}

	if o.ActivityStatus != nil {
		ret.ActivityStatus = new(ActStatus)
		*ret.ActivityStatus = *o.ActivityStatus
	}

	if o.AwardType != nil {
		ret.AwardType = new(AwardType)
		*ret.AwardType = *o.AwardType
	}

	return &ret
}

// ListActivitiesResponse
type ListActivitiesResponse struct {
	// 支付有礼活动列表
	Data []ActivityInformation `json:"data,omitempty"`
	// 总数
	TotalCount *int64 `json:"total_count,omitempty"`
	// 分页页码
	Offset *int64 `json:"offset,omitempty"`
	// 分页大小
	Limit *int64 `json:"limit,omitempty"`
}

func (o ListActivitiesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.Data != nil {
		toSerialize["data"] = o.Data
	}

	if o.TotalCount != nil {
		toSerialize["total_count"] = o.TotalCount
	}

	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}

	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	return json.Marshal(toSerialize)
}

func (o ListActivitiesResponse) String() string {
	var ret string
	ret += fmt.Sprintf("Data:%v, ", o.Data)

	if o.TotalCount == nil {
		ret += "TotalCount:<nil>, "
	} else {
		ret += fmt.Sprintf("TotalCount:%v, ", *o.TotalCount)
	}

	if o.Offset == nil {
		ret += "Offset:<nil>, "
	} else {
		ret += fmt.Sprintf("Offset:%v, ", *o.Offset)
	}

	if o.Limit == nil {
		ret += "Limit:<nil>"
	} else {
		ret += fmt.Sprintf("Limit:%v", *o.Limit)
	}

	return fmt.Sprintf("ListActivitiesResponse{%s}", ret)
}

func (o ListActivitiesResponse) Clone() *ListActivitiesResponse {
	ret := ListActivitiesResponse{}

	if o.Data != nil {
		ret.Data = make([]ActivityInformation, len(o.Data))
		for i, item := range o.Data {
			ret.Data[i] = *item.Clone()
		}
	}

	if o.TotalCount != nil {
		ret.TotalCount = new(int64)
		*ret.TotalCount = *o.TotalCount
	}

	if o.Offset != nil {
		ret.Offset = new(int64)
		*ret.Offset = *o.Offset
	}

	if o.Limit != nil {
		ret.Limit = new(int64)
		*ret.Limit = *o.Limit
	}

	return &ret
}

// ListActivityMerchantRequest
type ListActivityMerchantRequest struct {
	// 活动Id
	ActivityId *string `json:"activity_id"`
	// 分页页码
	Offset *int64 `json:"offset,omitempty"`
	// 限制分页最大数据条目
	Limit *int64 `json:"limit,omitempty"`
}

func (o ListActivityMerchantRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.ActivityId == nil {
		return nil, fmt.Errorf("field `ActivityId` is required and must be specified in ListActivityMerchantRequest")
	}
	toSerialize["activity_id"] = o.ActivityId

	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}

	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	return json.Marshal(toSerialize)
}

func (o ListActivityMerchantRequest) String() string {
	var ret string
	if o.ActivityId == nil {
		ret += "ActivityId:<nil>, "
	} else {
		ret += fmt.Sprintf("ActivityId:%v, ", *o.ActivityId)
	}

	if o.Offset == nil {
		ret += "Offset:<nil>, "
	} else {
		ret += fmt.Sprintf("Offset:%v, ", *o.Offset)
	}

	if o.Limit == nil {
		ret += "Limit:<nil>"
	} else {
		ret += fmt.Sprintf("Limit:%v", *o.Limit)
	}

	return fmt.Sprintf("ListActivityMerchantRequest{%s}", ret)
}

func (o ListActivityMerchantRequest) Clone() *ListActivityMerchantRequest {
	ret := ListActivityMerchantRequest{}

	if o.ActivityId != nil {
		ret.ActivityId = new(string)
		*ret.ActivityId = *o.ActivityId
	}

	if o.Offset != nil {
		ret.Offset = new(int64)
		*ret.Offset = *o.Offset
	}

	if o.Limit != nil {
		ret.Limit = new(int64)
		*ret.Limit = *o.Limit
	}

	return &ret
}

// ListActivitySkuRequest
type ListActivitySkuRequest struct {
	// 活动Id
	ActivityId *string `json:"activity_id"`
	// 分页页码
	Offset *int64 `json:"offset,omitempty"`
	// 分页大小
	Limit *int64 `json:"limit,omitempty"`
}

func (o ListActivitySkuRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.ActivityId == nil {
		return nil, fmt.Errorf("field `ActivityId` is required and must be specified in ListActivitySkuRequest")
	}
	toSerialize["activity_id"] = o.ActivityId

	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}

	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	return json.Marshal(toSerialize)
}

func (o ListActivitySkuRequest) String() string {
	var ret string
	if o.ActivityId == nil {
		ret += "ActivityId:<nil>, "
	} else {
		ret += fmt.Sprintf("ActivityId:%v, ", *o.ActivityId)
	}

	if o.Offset == nil {
		ret += "Offset:<nil>, "
	} else {
		ret += fmt.Sprintf("Offset:%v, ", *o.Offset)
	}

	if o.Limit == nil {
		ret += "Limit:<nil>"
	} else {
		ret += fmt.Sprintf("Limit:%v", *o.Limit)
	}

	return fmt.Sprintf("ListActivitySkuRequest{%s}", ret)
}

func (o ListActivitySkuRequest) Clone() *ListActivitySkuRequest {
	ret := ListActivitySkuRequest{}

	if o.ActivityId != nil {
		ret.ActivityId = new(string)
		*ret.ActivityId = *o.ActivityId
	}

	if o.Offset != nil {
		ret.Offset = new(int64)
		*ret.Offset = *o.Offset
	}

	if o.Limit != nil {
		ret.Limit = new(int64)
		*ret.Limit = *o.Limit
	}

	return &ret
}

// OpActScene
type OpActScene string

func (e OpActScene) Ptr() *OpActScene {
	return &e
}

// Enums of OpActScene
const (
	OPACTSCENE_OP_ACT_SCENE_JONIT_PLAN_CREATOR        OpActScene = "OP_ACT_SCENE_JONIT_PLAN_CREATOR"
	OPACTSCENE_OP_ACT_SCENE_JONIT_PLAN_AUTHORIZED_MCH OpActScene = "OP_ACT_SCENE_JONIT_PLAN_AUTHORIZED_MCH"
)

// ParticipateMchStatus
type ParticipateMchStatus string

func (e ParticipateMchStatus) Ptr() *ParticipateMchStatus {
	return &e
}

// Enums of ParticipateMchStatus
const (
	PARTICIPATEMCHSTATUS_PARTIC_MCH_STATUS_INVALID ParticipateMchStatus = "PARTIC_MCH_STATUS_INVALID"
	PARTICIPATEMCHSTATUS_PARTIC_MCH_STATUS_VALID   ParticipateMchStatus = "PARTIC_MCH_STATUS_VALID"
	PARTICIPATEMCHSTATUS_PARTIC_MCH_STATUS_EXPIRE  ParticipateMchStatus = "PARTIC_MCH_STATUS_EXPIRE"
)

// PaymentMethodCategory
type PaymentMethodCategory string

func (e PaymentMethodCategory) Ptr() *PaymentMethodCategory {
	return &e
}

// Enums of PaymentMethodCategory
const (
	PAYMENTMETHODCATEGORY_CFT                PaymentMethodCategory = "CFT"
	PAYMENTMETHODCATEGORY_SPECIFIC_BANK_CARD PaymentMethodCategory = "SPECIFIC_BANK_CARD"
)

// PaymentMethodInfo
type PaymentMethodInfo struct {
	// 支付方式，可以指定银行卡或零钱
	PaymentMethod *PaymentMethodCategory `json:"payment_method"`
	// 银行简称，指定支付方式为银行卡必填，详询附录
	BankAbbreviation *string `json:"bank_abbreviation,omitempty"`
}

func (o PaymentMethodInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.PaymentMethod == nil {
		return nil, fmt.Errorf("field `PaymentMethod` is required and must be specified in PaymentMethodInfo")
	}
	toSerialize["payment_method"] = o.PaymentMethod

	if o.BankAbbreviation != nil {
		toSerialize["bank_abbreviation"] = o.BankAbbreviation
	}
	return json.Marshal(toSerialize)
}

func (o PaymentMethodInfo) String() string {
	var ret string
	if o.PaymentMethod == nil {
		ret += "PaymentMethod:<nil>, "
	} else {
		ret += fmt.Sprintf("PaymentMethod:%v, ", *o.PaymentMethod)
	}

	if o.BankAbbreviation == nil {
		ret += "BankAbbreviation:<nil>"
	} else {
		ret += fmt.Sprintf("BankAbbreviation:%v", *o.BankAbbreviation)
	}

	return fmt.Sprintf("PaymentMethodInfo{%s}", ret)
}

func (o PaymentMethodInfo) Clone() *PaymentMethodInfo {
	ret := PaymentMethodInfo{}

	if o.PaymentMethod != nil {
		ret.PaymentMethod = new(PaymentMethodCategory)
		*ret.PaymentMethod = *o.PaymentMethod
	}

	if o.BankAbbreviation != nil {
		ret.BankAbbreviation = new(string)
		*ret.BankAbbreviation = *o.BankAbbreviation
	}

	return &ret
}

// PaymentMode
type PaymentMode struct {
	// APP_SCENE：App场景；SWING_CARD:刷卡;NO_SECRET_SCENE:免密支付;MINIAPP_SCENE:小程序;FACE_PAY_SCENE:人脸支付; OTHER_SCENE:其他支付场景
	PaymentSceneList []PaymentScene `json:"payment_scene_list,omitempty"`
}

func (o PaymentMode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.PaymentSceneList != nil {
		toSerialize["payment_scene_list"] = o.PaymentSceneList
	}
	return json.Marshal(toSerialize)
}

func (o PaymentMode) String() string {
	var ret string
	ret += fmt.Sprintf("PaymentSceneList:%v", o.PaymentSceneList)

	return fmt.Sprintf("PaymentMode{%s}", ret)
}

func (o PaymentMode) Clone() *PaymentMode {
	ret := PaymentMode{}

	if o.PaymentSceneList != nil {
		ret.PaymentSceneList = make([]PaymentScene, len(o.PaymentSceneList))
		for i, item := range o.PaymentSceneList {
			ret.PaymentSceneList[i] = item
		}
	}

	return &ret
}

// PaymentScene
type PaymentScene string

func (e PaymentScene) Ptr() *PaymentScene {
	return &e
}

// Enums of PaymentScene
const (
	PAYMENTSCENE_APP_SCENE        PaymentScene = "APP_SCENE"
	PAYMENTSCENE_SWING_CARD_SCENE PaymentScene = "SWING_CARD_SCENE"
	PAYMENTSCENE_NO_SECRET_SCENE  PaymentScene = "NO_SECRET_SCENE"
	PAYMENTSCENE_MINIAPP_SCENE    PaymentScene = "MINIAPP_SCENE"
	PAYMENTSCENE_FACE_PAY_SCENE   PaymentScene = "FACE_PAY_SCENE"
	PAYMENTSCENE_OTHER_SCENE      PaymentScene = "OTHER_SCENE"
)

// SendContentCategory
type SendContentCategory string

func (e SendContentCategory) Ptr() *SendContentCategory {
	return &e
}

// Enums of SendContentCategory
const (
	SENDCONTENTCATEGORY_SINGLE_COUPON SendContentCategory = "SINGLE_COUPON"
	SENDCONTENTCATEGORY_GIFT_PACKAGE  SendContentCategory = "GIFT_PACKAGE"
)

// SendMerchantOption
type SendMerchantOption string

func (e SendMerchantOption) Ptr() *SendMerchantOption {
	return &e
}

// Enums of SendMerchantOption
const (
	SENDMERCHANTOPTION_IN_SEVICE_COUPON_MERCHANT SendMerchantOption = "IN_SEVICE_COUPON_MERCHANT"
	SENDMERCHANTOPTION_MANUAL_INPUT_MERCHANT     SendMerchantOption = "MANUAL_INPUT_MERCHANT"
)

// SkuInfo
type SkuInfo struct {
	// 指定商品（商品sku）
	GoodsId *string `json:"goods_id"`
	// 创建时间
	CreateTime *string `json:"create_time"`
	// 更新时间
	UpdateTime *string `json:"update_time"`
}

func (o SkuInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.GoodsId == nil {
		return nil, fmt.Errorf("field `GoodsId` is required and must be specified in SkuInfo")
	}
	toSerialize["goods_id"] = o.GoodsId

	if o.CreateTime == nil {
		return nil, fmt.Errorf("field `CreateTime` is required and must be specified in SkuInfo")
	}
	toSerialize["create_time"] = o.CreateTime

	if o.UpdateTime == nil {
		return nil, fmt.Errorf("field `UpdateTime` is required and must be specified in SkuInfo")
	}
	toSerialize["update_time"] = o.UpdateTime
	return json.Marshal(toSerialize)
}

func (o SkuInfo) String() string {
	var ret string
	if o.GoodsId == nil {
		ret += "GoodsId:<nil>, "
	} else {
		ret += fmt.Sprintf("GoodsId:%v, ", *o.GoodsId)
	}

	if o.CreateTime == nil {
		ret += "CreateTime:<nil>, "
	} else {
		ret += fmt.Sprintf("CreateTime:%v, ", *o.CreateTime)
	}

	if o.UpdateTime == nil {
		ret += "UpdateTime:<nil>"
	} else {
		ret += fmt.Sprintf("UpdateTime:%v", *o.UpdateTime)
	}

	return fmt.Sprintf("SkuInfo{%s}", ret)
}

func (o SkuInfo) Clone() *SkuInfo {
	ret := SkuInfo{}

	if o.GoodsId != nil {
		ret.GoodsId = new(string)
		*ret.GoodsId = *o.GoodsId
	}

	if o.CreateTime != nil {
		ret.CreateTime = new(string)
		*ret.CreateTime = *o.CreateTime
	}

	if o.UpdateTime != nil {
		ret.UpdateTime = new(string)
		*ret.UpdateTime = *o.UpdateTime
	}

	return &ret
}

// SkuStatus
type SkuStatus string

func (e SkuStatus) Ptr() *SkuStatus {
	return &e
}

// Enums of SkuStatus
const (
	SKUSTATUS_SKU_STATUS_INVALID SkuStatus = "SKU_STATUS_INVALID"
	SKUSTATUS_SKU_STATUS_VAILD   SkuStatus = "SKU_STATUS_VAILD"
	SKUSTATUS_SKU_STATUS_EXPIRE  SkuStatus = "SKU_STATUS_EXPIRE"
	SKUSTATUS_SKU_STATUS_UNKNOWN SkuStatus = "SKU_STATUS_UNKNOWN"
)

// TerminateActResponse
type TerminateActResponse struct {
	// 生效时间
	TerminateTime *string `json:"terminate_time"`
	// 活动Id
	ActivityId *string `json:"activity_id"`
}

func (o TerminateActResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.TerminateTime == nil {
		return nil, fmt.Errorf("field `TerminateTime` is required and must be specified in TerminateActResponse")
	}
	toSerialize["terminate_time"] = o.TerminateTime

	if o.ActivityId == nil {
		return nil, fmt.Errorf("field `ActivityId` is required and must be specified in TerminateActResponse")
	}
	toSerialize["activity_id"] = o.ActivityId
	return json.Marshal(toSerialize)
}

func (o TerminateActResponse) String() string {
	var ret string
	if o.TerminateTime == nil {
		ret += "TerminateTime:<nil>, "
	} else {
		ret += fmt.Sprintf("TerminateTime:%v, ", *o.TerminateTime)
	}

	if o.ActivityId == nil {
		ret += "ActivityId:<nil>"
	} else {
		ret += fmt.Sprintf("ActivityId:%v", *o.ActivityId)
	}

	return fmt.Sprintf("TerminateActResponse{%s}", ret)
}

func (o TerminateActResponse) Clone() *TerminateActResponse {
	ret := TerminateActResponse{}

	if o.TerminateTime != nil {
		ret.TerminateTime = new(string)
		*ret.TerminateTime = *o.TerminateTime
	}

	if o.ActivityId != nil {
		ret.ActivityId = new(string)
		*ret.ActivityId = *o.ActivityId
	}

	return &ret
}

// TerminateActivityRequest
type TerminateActivityRequest struct {
	// 活动Id
	ActivityId *string `json:"activity_id"`
}

func (o TerminateActivityRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.ActivityId == nil {
		return nil, fmt.Errorf("field `ActivityId` is required and must be specified in TerminateActivityRequest")
	}
	toSerialize["activity_id"] = o.ActivityId
	return json.Marshal(toSerialize)
}

func (o TerminateActivityRequest) String() string {
	var ret string
	if o.ActivityId == nil {
		ret += "ActivityId:<nil>"
	} else {
		ret += fmt.Sprintf("ActivityId:%v", *o.ActivityId)
	}

	return fmt.Sprintf("TerminateActivityRequest{%s}", ret)
}

func (o TerminateActivityRequest) Clone() *TerminateActivityRequest {
	ret := TerminateActivityRequest{}

	if o.ActivityId != nil {
		ret.ActivityId = new(string)
		*ret.ActivityId = *o.ActivityId
	}

	return &ret
}

// ThresholdCategory
type ThresholdCategory string

func (e ThresholdCategory) Ptr() *ThresholdCategory {
	return &e
}

// Enums of ThresholdCategory
const (
	THRESHOLDCATEGORY_AMOUNT_THRESHOLD ThresholdCategory = "AMOUNT_THRESHOLD"
	THRESHOLDCATEGORY_NUMBER_THRESHOLD ThresholdCategory = "NUMBER_THRESHOLD"
)
